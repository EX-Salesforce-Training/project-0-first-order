@isTest
public class ServiceChangeTest {

    @isTest
    static void TestPositive(){
        Worker__c w = new Worker__c(Address__c='Test Blv', Name='TestWorker', Service__c='Groomer;Trainer');
        insert w;
        Menu__c m1 = new Menu__c(Worker__c=w.Id, Dog_breed__c='Something', Price__c=10, Service__c='Groomer', Service_Available__c=true);
        insert m1;
        Menu__c m2 = new Menu__c(Worker__c=w.Id, Dog_breed__c='Something', Price__c=11, Service__c='Trainer');
        insert m2;
        Menu__c m3 = new Menu__c(Worker__c=w.Id, Dog_breed__c='Something', Price__c=12, Service__c='Veterinarian', Service_Available__c=false);
        insert m3;
        
        // update worker service by removing groomer and adding veterinarian
        w.Service__c='Trainer;Veterinarian';
        update w;
        
        Menu__c groomerTest = [Select Service_Available__c, id FROM Menu__c Where id=:m1.Id];
        Menu__c vetTest = [Select Service_Available__c, id FROM Menu__c Where id=:m3.Id];
        
        System.assertEquals(false, groomerTest.Service_Available__c);
        System.assertEquals(true, vetTest.Service_Available__c);
    }
    
    @isTest
    static void TestMenuInsertPositive(){
        
        Worker__c w = new Worker__c(Address__c='Test Blv', Name='TestWorker', Service__c='Groomer');
        insert w;
        Menu__c m2 = new Menu__c(Worker__c=w.Id, Dog_breed__c='Something', Price__c=11, Service__c='Trainer');
        insert m2;
        
        Menu__c trainerTest = [Select Service_Available__c, id FROM Menu__c Where id=:m2.Id Limit 1];
        
        System.assertEquals(false, trainerTest.Service_Available__c);
        
    }
    
    @isTest
    static void TestScheduleInsertPositive(){
        Worker__c worker = new Worker__c(Address__c='Test Blv', Name='TestWorker', Service__c='Groomer');
        insert worker;
        // price of menu is set to $10.45 so invoice assertion should be the same.
        Menu__c menu = new Menu__c(Worker__c=worker.Id, Dog_breed__c='Something', Price__c=10.45, Service__c='Groomer');
        insert menu;
        Request__c request = new Request__c(Menu__c=menu.Id);
        insert request;
        Customer_Account__c cAccount= new Customer_Account__c(Something_Private__c='Not a Real Person');
        insert cAccount;
        // there is another charge tacked on to invoice prior to the charge for the main service, so final price should be $30.45
        Invoice__c invoice = new Invoice__c(Customer_Account__c = cAccount.Id, Final_Amount_Paid__c = 20);
        insert invoice;
        
        // test on insertion
        Appointment__c appointment = new Appointment__c(Request__c=request.Id, Worker__c=worker.id, Invoice__c=invoice.Id);
        insert appointment;
        
        Invoice__c invoiceChecker = [SELECT Id, Final_Amount_Paid__c FROM Invoice__c WHERE Id=:invoice.Id];
        System.assertEquals(30.45, invoiceChecker.Final_Amount_Paid__c);
        
    }
    /*
    @isTest
    static void TestScheduleInsertNegative(){
        Worker__c worker = new Worker__c(Address__c='Test Blv', Name='TestWorker', Service__c='Groomer');
        insert worker;
        // price of menu is set to $-10.45 which shouldn't be possible, since I set a validation rule on the menu.
        Menu__c menu;
        try{
            menu = new Menu__c(Worker__c=worker.Id, Dog_breed__c='Something', Price__c=-10.45, Service__c='Groomer');
        	insert menu;
        }catch(DMLexception d){
            System.assert(false);
        }
    }
    */
    
    @isTest
    static void TestScheduleUpdatePositive(){
        Worker__c worker = new Worker__c(Address__c='Test Blv', Name='TestWorker', Service__c='Groomer');
        insert worker;
        // price of menu is set to $15.50 so invoice assertion should be the same after updating schedule with an invoice.
        Menu__c menu = new Menu__c(Worker__c=worker.Id, Dog_breed__c='Something', Price__c=15.50, Service__c='Groomer');
        insert menu;
        Request__c request = new Request__c(Menu__c=menu.Id);
        insert request;
        Customer_Account__c cAccount= new Customer_Account__c(Something_Private__c='Not a Real Person');
        insert cAccount;
        Invoice__c invoice = new Invoice__c(Customer_Account__c = cAccount.Id);
        insert invoice;
        
        // test on update
        // no invoice at the creation of appointment
        Appointment__c appointment = new Appointment__c(Request__c=request.Id, Worker__c=worker.id);
        insert appointment;
        
        // update appointment with an invoice
        appointment.Invoice__c = invoice.Id;
        update appointment;
        
        Invoice__c invoiceChecker = [SELECT Id, Final_Amount_Paid__c FROM Invoice__c WHERE Id=:invoice.Id];
        System.assertEquals(15.50, invoiceChecker.Final_Amount_Paid__c);

    }
}