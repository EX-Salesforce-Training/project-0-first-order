@isTest
public class AccountTriggerTest {
	
    @testSetup
    private static void AccountSetup() {
        Account linkedAccount = new Account();
        linkedAccount.name = 'Linked';
        
        Insert linkedAccount;
        
        Contact newContact = new Contact();
        newContact.lastName = 'Test';
        newContact.AccountId = linkedAccount.Id;
        
        Insert newContact;
        
        linkedAccount.Primary__c = newContact.Id;
        
        Update linkedAccount;
    }
    
    @isTest
    private static void TP_PrimaryAlreadyAssociated() {
        Account linkedAccount = [SELECT Primary__c FROM Account WHERE name = 'Linked' LIMIT 1];
        
        System.assert(AccountTriggerHandler.PrimaryAlreadyAssociated(linkedAccount));
    }
    
    @isTest
    private static void NP_PrimaryAlreadyAssociated() {
        Account unlinkedAccount = new Account();
        Contact contact = [SELECT id FROM Contact LIMIT 1];
        unlinkedAccount.Primary__c = contact.Id;
        
        System.assert(!AccountTriggerHandler.PrimaryAlreadyAssociated(unlinkedAccount));
    }
    
    @isTest
    private static void TP_GetAndLinkPrimary() {
        Account unlinkedAccount = new Account();
        Contact predictedContact = [SELECT id FROM Contact LIMIT 1];
        unlinkedAccount.Primary__c = predictedContact.Id;
        
        Contact actualContact = AccountTriggerHandler.GetAndLinkPrimary(unlinkedAccount);
        System.assert(predictedContact.Id == actualContact.Id && actualContact.AccountId == unlinkedAccount.Id);
    }
    
    @isTest
    private static void NP_GetAndLinkPrimary() {
        Contact nullContact = AccountTriggerHandler.GetAndLinkPrimary(null);
        System.assert(nullContact == null);
    }
    
    @isTest
    private static void TP_LinkPrimary() {
        Contact newContact = new Contact();
        newContact.lastName = 'Test';
        Insert newContact;
        
        Account unlinkedAccount = new Account();
        unlinkedAccount.name = 'Test Account';
        unlinkedAccount.Primary__c = newContact.Id;
        Insert unlinkedAccount;
        newContact = [SELECT AccountId FROM Contact WHERE id =: newContact.Id];
        
        System.assertEquals(newContact.AccountId, unlinkedAccount.Id);
    }
}